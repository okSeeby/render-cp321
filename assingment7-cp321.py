# -*- coding: utf-8 -*-
"""Assingment7-CP321.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qyNd-AP0zTKJ8Jb_Nc057fTC-6u_vY_Z
"""

pip install dash plotly pandas

import dash
from dash import dcc, html
from dash.dependencies import Input, Output

import pandas as pd
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px
import plotly.graph_objects as go

# Updated dataset with correct data
data = [
    [1930, 'Uruguay', 'Argentina', 'Uruguay', 2],
    [1934, 'Italy', 'Czechoslovakia', 'Italy', 4],
    [1938, 'Italy', 'Hungary', 'Italy', 4],
    [1950, 'Uruguay', 'Brazil', 'Uruguay', 2],
    [1954, 'West Germany', 'Hungary', 'Germany', 3],  # West Germany is treated as Germany
    [1958, 'Brazil', 'Sweden', 'Brazil', 5],
    [1962, 'Brazil', 'Czechoslovakia', 'Brazil', 6],
    [1966, 'England', 'West Germany', 'England', 1],
    [1970, 'Brazil', 'Italy', 'Brazil', 7],
    [1974, 'West Germany', 'Netherlands', 'Germany', 3],  # West Germany is treated as Germany
    [1978, 'Argentina', 'Netherlands', 'Argentina', 2],
    [1982, 'Italy', 'West Germany', 'Italy', 4],
    [1986, 'Argentina', 'West Germany', 'Argentina', 2],
    [1990, 'West Germany', 'Argentina', 'Germany', 3],  # West Germany is treated as Germany
    [1994, 'Brazil', 'Italy', 'Brazil', 5],
    [1998, 'France', 'Brazil', 'France', 1],
    [2002, 'Brazil', 'Germany', 'Brazil', 5],
    [2006, 'Italy', 'France', 'Italy', 4],
    [2010, 'Spain', 'Netherlands', 'Spain', 1],
    [2014, 'Germany', 'Argentina', 'Germany', 4],
    [2018, 'France', 'Croatia', 'France', 2]
]

# Create DataFrame
df = pd.DataFrame(data, columns=['Year', 'Winner', 'Runner-up', 'Country', 'Wins'])

# Initialize Dash app
app = dash.Dash(__name__)
server = app.server
app.layout = html.Div([
    html.H1("FIFA World Cup Dashboard"),

    # Dropdown to select country
    html.Div([
        dcc.Dropdown(
            id='country-dropdown',
            options=[{'label': country, 'value': country} for country in df['Country'].unique()],
            value='Brazil',
            style={'width': '50%'}
        ),
    ]),

    # Display the number of times the country has won the World Cup
    html.Div(id='wins-output'),

    # Dropdown to select year
    html.Div([
        dcc.Dropdown(
            id='year-dropdown',
            options=[{'label': str(year), 'value': year} for year in df['Year'].unique()],
            value=2018,
            style={'width': '50%'}
        ),
    ]),

    # Display the winner and runner-up for the selected year
    html.Div(id='year-output'),

    # Display the choropleth map
    dcc.Graph(id='choropleth-map')
])

# Callback to update the number of wins
@app.callback(
    Output('wins-output', 'children'),
    Input('country-dropdown', 'value')
)
def update_wins(selected_country):
    wins = df[df['Country'] == selected_country]['Wins'].values[0]
    return f"{selected_country} has won the World Cup {wins} times."

# Callback to update the winner and runner-up for the selected year
@app.callback(
    Output('year-output', 'children'),
    Input('year-dropdown', 'value')
)
def update_year_info(selected_year):
    row = df[df['Year'] == selected_year]
    winner = row['Winner'].values[0]
    runner_up = row['Runner-up'].values[0]
    return f"In {selected_year}, the winner was {winner}, and the runner-up was {runner_up}."

# Callback to update the Choropleth map based on wins
@app.callback(
    Output('choropleth-map', 'figure'),
    Input('country-dropdown', 'value')
)
def update_map(selected_country):
    fig = px.choropleth(df,
                        locations="Country",
                        locationmode="country names",
                        color="Wins",
                        hover_name="Country",
                        color_continuous_scale="Viridis",
                        title="World Cup Wins by Country")
    return fig
